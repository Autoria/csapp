2.30 正数相加得到负数，或者负数相加得到正数。
int tadd_ok(int x, int y)
{
  return !(
    (x > 0 && y > 0 && x + y <= 0) ||
    (x < 0 && y < 0 && x + y >= 0)
  );
}

2.31
0111 1111 1111 1111 2^15-1
0000 0000 0000 0001 1
------------------- add     正溢出
1000 0000 0000 0000 -2^15

1000 0000 0000 0000 -2^15
0000 0000 0000 0001 1
------------------- sub     负溢出
0111 1111 1111 1111 2^15-1

1000 0000 0000 0000 
1111 1111 1111 1111
------------------- sub
0000 0000 0000 0001

因为补码运算，无论是否溢出，当 sum = x + y 时，  sum-x == y总是成立。

2.32
TMin与TMax不相等，直接使用负号导致溢出

若 a > 0, b < 0, 那么t < 0时才溢出；
若 a < 0, v > 0, 那么t > 0时才溢出。

还有一种溢出是 t = 0，此时 t = 1 0000 0000 0000 0000 = 2^16
但是这种情况无法发生，因为对于任意的a, b而言,(a - b) <= |Tmax|+|Tmin| = 2^w - 1, 对于本例w = 16。
所以t != 0。

综上所述，a与b异号，并且t与b同号的情况下，a-b发生溢出。
int tsub_ok(int x, int y){
    int w = sizeof(int)<<3;
    int t = x - y;
    x = x >> (w-1);    /* get sign bit*/
    y = y >> (w-1);
    t = t >> (w-1);
    return !((x != y) && (y == t));
}
